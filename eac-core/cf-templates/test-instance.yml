AWSTemplateFormatVersion: "2010-09-09"
Description: Continuous Delivery CodePipeline that automatically builds and tests an AMI built by Packer
Parameters:
  AmiId:
    Type: String
    Description: AMI ID to build instance from
  VpcId:
    Type: String
    Description: VPC to launch instance in
  SubnetId:
    Type: String
    Description: Subnet to launch instance in
  KeyName:
    Type: String
    Description: SSH Keypair Name
  Environment:
    Type: String
    Description: Environment Type
  CESaccountID:
    Type: String
    Description: None
  LambdaPrincipalARN:
    Type: String
    Description: None
  LambdaPrincipalARNManagedUser:
    Type: String
    Description: None
  HostedZone:
    Type: String
    Description: None
  AtyponInternalLoadBalancer:
    Type: String
    Description: None
  RDSMasterUser:
    Type: String
    Description: None
  RDSMasterPassword:
    Type: String
    Description: None
  S3TemplateBucketName:
    Type: String
    Description: None
  AtyponAppRole:
    Type: String
    Description: None
  AuthAPIUrl:
    Type: String
    Description: None
Resources:
  AtyponInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'AtyponAppRole'
  TestSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group opening SSH and HTTP to Test Instance"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - 
          CidrIp: 0.0.0.0/0
          FromPort: 8080
          ToPort: 8080
          IpProtocol: TCP
        -
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: TCP
  TestInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ConfigureShibbolethServer:
            - ConfigFilesAndStart
        ConfigFilesAndStart:
          files:
            /opt/chefhelper/Cloudformation.properties:
              content: !Sub | 
                AWSACCOUNT=${CESaccountID}
                LAMBDAPRINCIPALARN=${LambdaPrincipalARN}
                LAMBDAPRINCIPALARNMU=${LambdaPrincipalARNManagedUser}
                APICESURL=${AuthAPIUrl}
                ERIGHTSURL=rightsuite-int-elb.${Environment}.${HostedZone}
                INTERNALATYPONLBURL=${AtyponInternalLoadBalancer}
                INTERNALATYPONLBDNSURL=rightsuite-int-elb.${Environment}.${HostedZone}
                ENVIRONMENT=${Environment}
                DOMAIN=${HostedZone}
                DBUSER=${RDSMasterUser}
                DBPASSWD=${RDSMasterPassword}
              mode: '000644'
              authentication: S3AccessCreds
              owner: root
              group: root
            /etc/chef/encrypted_data_bag_secret:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3TemplateBucketName'
                  - .s3.amazonaws.com/configs/
                  - !Ref 'Environment'
                  - -databag_secret
              mode: '000644'
              authentication: S3AccessCreds
              owner: root
              group: root
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Ref 'S3TemplateBucketName'
          roleName: !Ref 'AtyponAppRole'
    Properties:
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref TestSecurityGroup
      ImageId: !Ref AmiId
      InstanceType: t2.small
      IamInstanceProfile: !Ref 'AtyponInstanceProfile'
      KeyName: !Ref KeyName
      Tags:
        -
          Key: Name
          Value: AMIPipelineTestInstance
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "# Install the files and packages from the metadata\n"
            - "source /root/.bash_profile\n"
            - "export HOME=/root\n"
            - "printenv > /root/cf-init-env\n"
            #- "/usr/bin/yum -y install rpl --enablerepo=epel\n"
            - '/opt/aws/bin/cfn-init -v --stack '
            - !Ref 'AWS::StackName'
            - ' --resource TestInstance --configsets ConfigureShibbolethServer
              --region '
            - !Ref 'AWS::Region'
            - "\n"
            - "#configure chef helper\n"
            - "cd /opt/chefhelper && python var2node.py "
            - !Ref 'Environment'
            - "\n"
            - "#start chef\n"
            - "/usr/bin/chef-solo --no-color -c /tmp/packer-chef-solo/solo.rb -j /opt/chefhelper/node.json -E "
            - !Ref 'Environment'
            - "\n"
            - "/usr/sbin/usermod -d /usr/share/tomcat tomcat\n"
Outputs:
  TestInstanceId:
    Value: !Ref TestInstance
  TestInstanceDnsName:
    Value: !GetAtt TestInstance.PublicDnsName
