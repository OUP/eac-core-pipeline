<?xml version="1.0" encoding="UTF-8"?>

<AttributeResolver
        xmlns="urn:mace:shibboleth:2.0:resolver" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="urn:mace:shibboleth:2.0:resolver http://shibboleth.net/schema/idp/shibboleth-attribute-resolver.xsd">


    <!-- ========================================== -->
    <!--      Attribute Definitions                 -->
    <!-- ========================================== -->

	<AttributeDefinition id="awsRoleSessionName" xsi:type="Simple">
		<InputDataConnector ref="ScriptedAttributeConnector" attributeNames="userId" />
		<AttributeEncoder
	 	 	xsi:type="SAML2String"
	 	 	name="https://aws.amazon.com/SAML/Attributes/RoleSessionName"
	  		friendlyName="RoleSessionName" />
	</AttributeDefinition>

	<AttributeDefinition id="awsRoles" xsi:type="Simple">
		<InputDataConnector ref="ScriptedAttributeConnector" attributeNames="awsRoles" />
		<AttributeEncoder
	 	 	xsi:type="SAML2String"
	  		name="https://aws.amazon.com/SAML/Attributes/Role"
	  	friendlyName="Role" />
	</AttributeDefinition>

	<AttributeDefinition id="RsSessionKey" xsi:type="Simple">
		<InputDataConnector ref="ScriptedAttributeConnector" attributeNames="rightSuitSessionKey" />
		<AttributeEncoder
	  		xsi:type="SAML2String"
	  		name="sessionKey"
	  		friendlyName="sessionKey" />
	</AttributeDefinition>

	<AttributeDefinition id="userGroupWithRoles" xsi:type="Simple">
		<InputDataConnector ref="ScriptedAttributeConnector" attributeNames="GroupBasedRoles" />
		<AttributeEncoder
	  		xsi:type="SAML2String"
	  		name="userGroupWithRoles"
	  		friendlyName="userGroupWithRoles" />
	</AttributeDefinition>

	<AttributeDefinition id="highestUserRole" xsi:type="Simple">
		<InputDataConnector ref="ScriptedAttributeConnector" attributeNames="highestRole" />
		<AttributeEncoder
	  		xsi:type="SAML2String"
	  		name="highestUserRole"
	  		friendlyName="highestUserRole" />
	</AttributeDefinition>

	<AttributeDefinition id="userId" xsi:type="Simple">
		<InputDataConnector ref="ScriptedAttributeConnector" attributeNames="userId" />
		<AttributeEncoder
	  		xsi:type="SAML2String"
	  		name="userId"
	  		friendlyName="userId" />
	</AttributeDefinition>

	<AttributeDefinition id="userName" xsi:type="Simple">
		<InputDataConnector ref="ScriptedAttributeConnector" attributeNames="principalName" />
		<AttributeEncoder
	  		xsi:type="SAML2String"
	  		name="userName"
	  		friendlyName="userName" />
	</AttributeDefinition>

	<AttributeDefinition id="passwordToken" xsi:type="Simple">
		<InputDataConnector ref="ScriptedAttributeConnector" attributeNames="passwordToken" />
		<AttributeEncoder
	  		xsi:type="SAML2String"
	  		name="passwordToken"
	  		friendlyName="passwordToken" />
	</AttributeDefinition>
	
    <!-- ========================================== -->
    <!--      Data Connectors                       -->
    <!-- ========================================== -->

    <DataConnector id="staticAttributes" xsi:type="Static">
        <Attribute id="affiliation">
            <Value>member</Value>
        </Attribute>
    </DataConnector>
	
	<DataConnector id="ScriptedAttributeConnector" xsi:type="ScriptedDataConnector">
		<Script><![CDATA[
			load("nashorn:mozilla_compat.js");
			importPackage(Packages.net.shibboleth.idp.attribute);
			importPackage(Packages.java.util);
			importPackage(Packages.org.slf4j);
			importPackage(Packages.java.lang);
			importPackage(Packages.javax.security.auth);
			importPackage(com.oup.shibboleth.attributes);
			importPackage(com.oup.shibboleth.utils);
			
			logger = LoggerFactory.getLogger("attribute-resolver");
			
			//change according to the environment
			awsIDP=GetConstantsUtils.getProperty("<%=@idparn%>");
			awsRolePrePhrase=GetConstantsUtils.getProperty("aws.iam.rolePrePhrase");
			roleSuffixWithSeparator=GetConstantsUtils.getProperty("aws.iam.roleSuffixWithSeparator");
			
			attr = new IdPAttribute("principalName");
			set = new HashSet(1);
			var principalName = resolutionContext.getPrincipal();
            principalName = principalName.indexOf('MU#') !== -1 ? principalName.split('MU#')[1] : principalName;
            set.add(new StringAttributeValue(principalName));
			attr.setValues(set);
			connectorResults.add(attr);
				if (subjects != null) {
				subject = subjects[0];
				principals = subject.getPrincipals();
				logger.info("principals : " + principals);
				var i = principals.iterator();
						
					while (i.hasNext()) {
						principal = i.next();
						principal = principal.getName();
						if (principal.indexOf("sessionKey:")>=0) {

							attr = new IdPAttribute("rightSuitSessionKey");
							set = new HashSet();
							RSsessionKey = principal.replace("sessionKey:", "");
							set.add(new StringAttributeValue(RSsessionKey));
							attr.setValues(set);
							connectorResults.add(attr);
							
						}else if(principal.indexOf("userId:")>=0) {

							attr = new IdPAttribute("userId");
							set = new HashSet();
							userId = principal.replace("userId:", "");
							set.add(new StringAttributeValue(userId));
							attr.setValues(set);
							connectorResults.add(attr);
							logger.info("UserId : " + userId);
								
							RSAttr = SAMLAttributes.getAttributes(userId);							
							logger.info("highestRole : " + RSAttr.getHighestRole());
							
							//highestRole
							attr = new IdPAttribute("highestRole");
							set = new HashSet();
							set.add(new StringAttributeValue(RSAttr.getHighestRole()));
							attr.setValues(set);
							connectorResults.add(attr);
							
							//groupInfo
							userGroupInfo = RSAttr.getUserGroupInfo();
							if (userGroupInfo != null){
								attr = new IdPAttribute("GroupBasedRoles");
								set = new HashSet();
								set.add(new StringAttributeValue(userGroupInfo));
								attr.setValues(set);
								connectorResults.add(attr);
							}
							
							//userRoles
							attr = new IdPAttribute("awsRoles");
							set = new HashSet();
							roles = RSAttr.getUserRoles().split(",");
							for(j in roles){
								set.add(new StringAttributeValue(awsIDP+','+awsRolePrePhrase+'/'+roles[j]+roleSuffixWithSeparator));
							}
							attr.setValues(set);
							connectorResults.add(attr);
							
						} else if (principal.indexOf("passwordToken:")>=0) {
							// pass passwordToken attribute
							attr = new IdPAttribute("passwordToken");
							set = new HashSet();
							passwordToken = principal.replace("passwordToken:", "");
							set.add(new StringAttributeValue(passwordToken));
							attr.setValues(set);
							connectorResults.add(attr);
						}
					}
				}		
		]]></Script>
	</DataConnector>

</AttributeResolver>
